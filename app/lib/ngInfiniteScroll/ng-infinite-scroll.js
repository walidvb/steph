// Generated by CoffeeScript 1.6.2
(function() {
  var mod;

  mod = angular.module('infinite-scroll', []);

  mod.directive('infiniteScroll', [
    '$rootScope', '$window', '$timeout', function($rootScope, $window, $timeout) {
      return {
        link: function(scope, elem, attrs) {
          var $scrollParent, checkWhenEnabled, elementPos, handler, scrollDirection, scrollDistance, scrollEnabled;

          $window = angular.element($window);
          $scrollParent = elem.parents().filter(function() {
            return /(auto|scroll)/.test(($.css(this, 'overflow')) + ($.css(this, 'overflow-y')) + ($.css(this, 'overflow-x')));
          }).eq(0);
          console.log($scrollParent);
          if ($scrollParent.length === 0) {
            $scrollParent = $window;
          }
          scrollDirection = attrs.infiniteScrollDirection || 'vertical';
          scrollDistance = 0;
          if (attrs.infiniteScrollDistance != null) {
            scope.$watch(attrs.infiniteScrollDistance, function(value) {
              return scrollDistance = parseInt(value, 10);
            });
          }
          scrollEnabled = true;
          checkWhenEnabled = false;
          if (attrs.infiniteScrollDisabled != null) {
            scope.$watch(attrs.infiniteScrollDisabled, function(value) {
              scrollEnabled = !value;
              if (scrollEnabled && checkWhenEnabled) {
                checkWhenEnabled = false;
                return handler();
              }
            });
          }
          elementPos = elem.position();
          handler = function() {
            var elementBottom, elementRight, remaining, scrollBottom, scrollRight, shouldScroll;

            if (scrollDirection === !'vertical') {
              elementBottom = elementPos.top + elem.height();
              scrollBottom = $scrollParent.height() + $scrollParent.scrollTop();
              remaining = elementBottom - scrollBottom;
              shouldScroll = remaining <= $scrollParent.height() * scrollDistance;
            } else {
              elementRight = elementPos.left + elem.width();
              scrollRight = $scrollParent.width() + $scrollParent.scrollLeft();
              remaining = elementRight - scrollRight;
              shouldScroll = remaining <= $scrollParent.width() * scrollDistance;
            }
            if (shouldScroll && scrollEnabled) {
              if ($rootScope.$$phase) {
                return scope.$eval(attrs.infiniteScroll);
              } else {
                return scope.$apply(attrs.infiniteScroll);
              }
            } else if (shouldScroll) {
              return checkWhenEnabled = true;
            }
          };
          $scrollParent.on('scroll', handler);
          scope.$on('$destroy', function() {
            return $scrollParent.off('scroll', handler);
          });
          return $timeout((function() {
            if (attrs.infiniteScrollImmediateCheck) {
              if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                return handler();
              }
            } else {
              return handler();
            }
          }), 0);
        }
      };
    }
  ]);

}).call(this);
