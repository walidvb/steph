// Generated by CoffeeScript 1.6.2
(function() {
  angular.module("myApp.directives", [].directive("scrollSpy", [
    "$timeout", function(timer) {
      return {};
    }
  ]).directive("fixedMenu", [
    "$timeout", function(timer) {
      return {
        link: function(scope, elem, attr) {
          var fixIt;

          console.log(elem);
          fixIt = function(e) {
            var fixMenu, lastPos, menu_height, menu_pos, oldPadding, timeout;

            menu_pos = $(elem).offset().top;
            menu_height = $(elem).height();
            oldPadding = $("body").css("paddingTop");
            lastPos = $(window).scrollTop();
            timeout = void 0;
            fixMenu = function(e) {
              var newTop, pos, scrollingDown;

              pos = $(window).scrollTop();
              lastPos = $(window).scrollTop();
              scrollingDown = e.originalEvent.detail > 0 || e.originalEvent.wheelDelta < 0;
              console.log(scrollingDown);
              if (pos >= menu_pos) {
                $(elem).addClass("navbar-fixed-top");
                $("body").css("paddingTop", menu_height);
                if (scrollingDown) {
                  newTop = Math.min(menu_height, lastPos - pos);
                  return $(elem).css({
                    top: "+=" + 1
                  });
                }
              } else {
                $(elem).removeClass("navbar-fixed-top");
                return $("body").css("paddingTop", oldPadding);
              }
            };
            return $(window).on("scroll", function(e) {
              return fixMenu(e);
            }).on("resize", function(e) {
              menu_pos = $(elem).offset().top;
              menu_height = $(elem).outerHeight(true);
              oldPadding = $("body").css("paddingTop");
              return fixMenu(e);
            });
          };
          return timer(fixIt, 0);
        }
      };
    }
  ]).directive("myFullscreen", [
    "$timeout", function(timer) {
      return function(scope, elem, attrs) {
        var setSize;

        if (!Modernizr.touch) {
          setSize = function() {
            return $(elem).height($(window).height()).css("overflow", "auto");
          };
          $(window).on("resize", function() {
            return setSize();
          });
          return timer(setSize, 0);
        }
      };
    }
  ]).directive("myBackgroundImg", function() {
    return {
      restrict: "AE",
      templateUrl: "partials/backgrounds.html",
      scope: {
        background: "=backgroundProps",
        test: "="
      }
    };
  }).directive("mySlide", function() {
    return {
      restrict: "AE",
      templateUrl: "partials/slide.html",
      scope: {
        slide: "=mySlides"
      }
    };
  }).directive("myHtml", [
    "$timeout", "$sce", function(timer, $sce) {
      return {
        scope: {
          myHtml: "="
        },
        template: "<span ng-bind-html='trustMe(myHtml)'></span>",
        controller: function($scope, $element) {
          return $scope.trustMe = function(html) {
            return $sce.trustAsHtml(html);
          };
        }
      };
    }
  ]).directive("myCenter", [
    "$timeout", function(timer) {
      return {
        link: function(scope, elem, attrs) {
          var center;

          center = function() {
            var elemHeight, wrapperHeight;

            wrapperHeight = $(elem).parents("section").height();
            elemHeight = $(elem).height();
            return $(elem).css({
              position: "relative",
              top: wrapperHeight / 2 - elemHeight / 2
            });
          };
          return timer((function() {
            center();
            return $(window).on("resize", center);
          }), 10);
        }
      };
    }
  ]).directive("myIsotope", [
    "$timeout", function(timer) {
      return {
        link: function(scope, elem, attrs) {
          return timer((function() {
            return $(elem.isotope({
              itemSelector: "li"
            }));
          }), 0);
        }
      };
    }
  ]));

}).call(this);
